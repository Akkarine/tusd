// If this file gets changed, you must recompile the generate package in pkg/proto.
// To do this, install the Go protobuf toolchain as mentioned in
// https://github.com/golang/protobuf#installation.
// Then use following command to recompile it with gRPC support:
//   protoc --go_out=plugins=grpc:../../../../../pkg/proto/ v2/hook.proto
// In addition, it may be necessary to update the protobuf or gRPC dependencies as well.

syntax = "proto3";
package v2;

// TODO: remove
// TODO: Move into better directory
//import "google/protobuf/any.proto";

// Hook's data
message HookRequest {
	string type = 1;
	Event event = 2;
}

message Event {
	FileInfo upload = 1;
	HTTPRequest httpRequest = 2;
}

// TODO: Keep consistent naming capitalization
// Uploaded data
message FileInfo {
	// Unique integer identifier of the uploaded file
	string id = 1;
	// Total file size in bytes specified in the NewUpload call
	int64 size = 2; 
	// Indicates whether the total file size is deferred until later
	bool sizeIsDeferred = 3;
	// Offset in bytes (zero-based)
	int64 offset = 4;
	map<string, string> metaData = 5;
	// Indicates that this is a partial upload which will later be used to form
	// a final upload by concatenation. Partial uploads should not be processed
	// when they are finished since they are only incomplete chunks of files.
	bool isPartial = 6; 
	// Indicates that this is a final upload
	bool isFinal = 7; 
	// If the upload is a final one (see IsFinal) this will be a non-empty
	// ordered slice containing the ids of the uploads of which the final upload
	// will consist after concatenation.
	repeated string partialUploads = 8;
	// Storage contains information about where the data storage saves the upload,
	// for example a file path. The available values vary depending on what data
	// store is used. This map may also be nil.
	map <string, string> storage = 9;
}

message HTTPRequest {
	// Method is the HTTP method, e.g. POST or PATCH
	string method = 1;
	// URI is the full HTTP request URI, e.g. /files/fooo
	string uri = 2;
	// RemoteAddr contains the network address that sent the request
	string remoteAddr = 3; 

	map <string, string> header = 4;
}

message HookResponse {
	HTTPResponse httpResponse = 1;
	bool rejectUpload = 2;
	bool stopUpload = 3;
}

message HTTPResponse {
	int64 statusCode = 1;
	map <string, string> headers = 2;
	string body = 3;
}


// The hook service definition.
service HookHandler {
  // Sends a hook
  rpc InvokeHook (HookRequest) returns (HookResponse) {}
}
